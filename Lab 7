/*----------------------------------------------------------------------------*/
/*                                                                            */
/*    Module:       main.cpp                                                  */
/*    Author:       VEX                                                       */
/*    Created:      Tue Mar 16 2021                                           */
/*    Description:  Arm Manual Movement                                       */
/*                                                                            */
/*    This example will continuously display the current                      */
/*    position of the arm on the V5 Brain's screen and allow you              */
/*    to manually move the arm around                                         */
/*                                                                            */
/*----------------------------------------------------------------------------*/

// ---- START VEXCODE CONFIGURED DEVICES ----
// Robot Configuration:
// [Name]               [Type]        [Port(s)]
// RoboticArm1          RoboticArm    1, 2, 3, 4, A, B, C, D
// EStop                bumper        E               
// Magnet5              electromagnet 5               
// ---- END VEXCODE CONFIGURED DEVICES ----

#include "vex.h"

using namespace vex;

float myVariable;

event message1 = event();

// "when started" hat block
int whenStarted1() {
  RoboticArm1.setMasteringValues(1829,2247,1898,465);
  RoboticArm1.setJointMoveSpeed(60.0);
  RoboticArm1.setToolTipOffset(-0.7, 0.0, -2.0);
  Magnet5.setPower(100.0);
  return 0;
}

// "when EStop pressed" hat block
void onevent_EStop_pressed_0() {
  RoboticArm1.emergencyStop();
}

// "when started" hat block
int whenStarted2() {
  Brain.Screen.setPenColor(white);
  Brain.Screen.setFillColor(white);
  Brain.Screen.drawRectangle(30, 10, 200, 100);
  Brain.Screen.setFillColor(red);
  Brain.Screen.drawRectangle(30, 125, 200, 100);
  Brain.Screen.setFillColor(green);
  Brain.Screen.drawRectangle(250, 10, 200, 100);
  Brain.Screen.setFillColor(blue);
  Brain.Screen.drawRectangle(250, 125, 200, 100);
  return 0;
}

// "when Brain screen pressed" hat block
void onevent_Brain_screen_pressed_0() {
  if (Brain.Screen.xPosition() > 250.0) {
    if (Brain.Screen.yPosition() > 125.0) {
      // Blue Box Pressed
      RoboticArm1.moveToPositionJoint(9.01, -6.798, 5);
      RoboticArm1.moveToPositionJoint(9.01, -6.798, 1.5);
      wait(1.0, seconds);
      Magnet5.pickup(20);
      wait(1.0, seconds);
      RoboticArm1.moveToPositionJoint(9.01, -6.798, 5);
      RoboticArm1.moveToPositionJoint(8.308, 5.023, 4);
      wait(1.0, seconds);
      Magnet5.drop();
      wait(1.0, seconds);
      RoboticArm1.moveToPositionJoint(7, -1, 3);
    }
    else {
      // Green Box Pressed
      RoboticArm1.moveToPositionJoint(9.01, -6.798, 5);
      RoboticArm1.moveToPositionJoint(9.01, -6.798, 2.1);
      wait(1.0, seconds);
      Magnet5.pickup(20);
      wait(1.0, seconds);
      RoboticArm1.moveToPositionJoint(9.01, -6.798, 5);
      RoboticArm1.moveToPositionJoint(9.911, 5.233, 4);
      wait(1.0, seconds);
      Magnet5.drop();
      wait(1.0, seconds);
      RoboticArm1.moveToPositionJoint(7, -1, 3);
    }
  }
  else {
    if (Brain.Screen.yPosition() > 125.0) {
      // Red Box Pressed
      RoboticArm1.moveToPositionJoint(9.01, -6.798, 5);
      RoboticArm1.moveToPositionJoint(9.01, -6.798, 2.7);
      wait(1.0, seconds);
      Magnet5.pickup(20);
      wait(1.0, seconds);
      RoboticArm1.moveToPositionJoint(9.01, -6.798, 5);
      RoboticArm1.moveToPositionJoint(9.911, 2.956, 4);
      wait(1.0, seconds);
      Magnet5.drop();
      wait(1.0, seconds);
      RoboticArm1.moveToPositionJoint(7, -1, 3);
    }
    else {
      // White Box Pressed
    }
  }
}


int main() {
  // register event handlers
  EStop.pressed(onevent_EStop_pressed_0);
  Brain.Screen.pressed(onevent_Brain_screen_pressed_0);

  wait(15, msec);
  // post event registration

  // set default print color to black
  printf("\033[30m");

  // wait for rotation sensor to fully initialize
  wait(30, msec);

  vex::task ws1(whenStarted2);
  whenStarted1();
}


